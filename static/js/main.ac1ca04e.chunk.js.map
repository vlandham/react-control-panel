{"version":3,"sources":["components/Controls/SearchView.js","components/MultiSelect/CreatableFixed.js","components/MultiSelect/MultiSelect.js","components/Controls/FilterView.js","components/Icons/Icons.js","components/HelpIcon/HelpIcon.js","components/Controls/DisplayView.js","utils/string.js","components/Controls/Controls.js","utils/collection.js","utils/object.js","components/SidebarPage/SidebarPage.js","utils/filters.js","components/App/urlProps.js","components/App/App.js","serviceWorker.js","index.js"],"names":["SearchView","props","handleSearchChange","bind","renderOption","handleInputChange","nextProps","this","searchConfig","values","options","map","v","Object","assign","label","value","searchable","searchProps","p","id","indexStrategy","PrefixIndexStrategy","filterOptions","createFilterOptions","indexes","newValue","newVal","isEmpty","Array","d","currentInput","undefined","handleChange","val","opts","key","option","selectValue","focusOption","focusedOption","style","classNames","push","className","join","onClick","onMouseOver","search","name","onChange","noResultsText","placeholder","description","multi","optionRenderer","onInputChange","Component","defaultProps","CreatableSelect","context","menuRenderer","onInputKeyDown","onOptionSelect","event","shouldKeyDownEventCreateNewOption","select","getFocusedOption","_createPlaceholderOption","keyCode","createNewOption","preventDefault","input","inputValue","isValidNewOption","newOptionCreator","onNewOptionClick","labelKey","valueKey","isOptionUnique","unshift","promptTextCreator","excludeOptions","filteredOptions","concat","prompt","params","onSelect","focus","refProp","restProps","children","defaultChildren","allowCreate","ref","React","length","filter","existingOption","defaultFilterOptions","defaultMenuRenderer","MultiSelect","handleAddMultiple","valueMap","forEach","newValues","split","trim","filteredNewValues","nValue","console","log","addMultipleIds","disabled","makeOptions","selectComponent","Creatable","Select","optionHeight","PureComponent","allowMulti","FilterView","handleFilterChange","handleFilterClear","filterId","filterValue","filterVals","filters","htmlFor","focusNode","Boolean","filterConfigs","Button","variant","filterConfig","renderFilterTitle","renderFilterSelect","HelpIcon","icon","text","title","position","trigger","theme","Range","createSliderWithTooltip","Slider","Handle","handle","dragging","index","prefixCls","overlay","visible","placement","DisplayView","handleDisplayChange","handleDisplayClear","handleSelectAll","viewConfigs","c","config","currentValue","help","selectAll","range","min","max","default","step","d3","marks","reduce","memo","i","unit","reset","type","renderSlider","renderRange","renderTitle","renderDropDown","renderViewControl","capitalize","s","charAt","toUpperCase","slice","Controls","state","dataDefs","data","filterData","filterBy","filterDef","level","collection","propertyName","allValues","isArray","uniq","isFinite","sort","uniqueValues","viewConfig","def","extractProperties","searchBy","desc","items","node","item","prop","updateConfigs","update","nextState","propKeys","keys","updated","k","ignoreIndex","indexOf","splice","noEmpty","removeEmptyKeys","obj","res","temp","onChangeFilters","onChangeSearch","propertyId","handler","error","controlsConfig","generateFilterConfig","generateSearchConfig","view","generateViewConfig","setState","display","others","footer","shouldDisplayControls","controls","renderSearchView","renderDisplayView","renderFilterView","renderFooter","SidebarPage","sidebar","Col","xl","md","Container","fluid","Row","renderSidebar","renderMain","keepIfNoFilters","row","keep","list","rowValue","f","toString","rowStrings","r","some","includes","urlPropsQueryConfig","colorBy","UrlQueryParamTypes","string","encode","Serialize","encodeJson","decode","decodeJson","App","onChangeColorBy","filteredData","renderData","addUrlProps","window","location","hostname","match","ReactDOM","render","Route","component","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ac1ca04e.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport VirtualizedSelect from 'react-virtualized-select';\nimport createFilterOptions from 'react-select-fast-filter-options';\nimport { PrefixIndexStrategy } from 'js-search';\nimport isEmpty from 'lodash.isempty';\n\nimport 'react-select/dist/react-select.css';\nimport 'react-virtualized/styles.css';\nimport 'react-virtualized-select/styles.css';\n\nimport './SearchView.scss';\n\n/**\n * Helper to make options from app data\n */\nfunction makeOptions(values) {\n  return values.map(v => {\n    return Object.assign({}, v, {\n      label: v.label,\n      value: v.value,\n    });\n  });\n}\n\n/**\n * This view displays a control for searching for nodes in the network.\n */\nclass SearchView extends Component {\n  static propTypes = {\n    handleChange: PropTypes.func.isRequired,\n    search: PropTypes.array,\n    searchConfig: PropTypes.shape({\n      id: PropTypes.string,\n      label: PropTypes.string,\n      description: PropTypes.string,\n      values: PropTypes.arrayOf(\n        PropTypes.shape({\n          label: PropTypes.string,\n          value: PropTypes.string,\n        }),\n      ),\n    }),\n  };\n\n  static defaultProps = {\n    handleChange: () => {},\n    searchConfig: {},\n  };\n\n  constructor(props) {\n    super(props);\n    this.handleSearchChange = this.handleSearchChange.bind(this);\n    this.renderOption = this.renderOption.bind(this);\n    this.handleInputChange = this.handleInputChange.bind(this);\n  }\n\n  componentWillUpdate(nextProps) {\n    // We only expect this to change once.\n    if (this.props.searchConfig.values !== nextProps.searchConfig.values) {\n      this.options = makeOptions(nextProps.searchConfig.values);\n\n      // We create a indexer that allows us to search for an application based on multiple\n      // properties.\n      const searchable = nextProps.searchConfig.searchProps.map(p => p.id);\n      const indexStrategy = new PrefixIndexStrategy();\n\n      this.filterOptions = createFilterOptions({\n        indexes: searchable,\n        options: this.options,\n        indexStrategy,\n      });\n    }\n  }\n\n  handleSearchChange(newValue) {\n    let newVal;\n    if (isEmpty(newValue)) {\n      newVal = [];\n    } else if (newValue instanceof Array) {\n      newVal = newValue.map(d => d.value);\n    }\n    this.currentInput = undefined;\n    this.props.handleChange(newVal);\n  }\n\n  handleInputChange(val) {\n    this.currentInput = val;\n  }\n\n  renderOption(opts) {\n    const { key, option, selectValue, focusOption, focusedOption, style } = opts;\n\n    const classNames = ['SearchOption'];\n    if (option === focusedOption) {\n      classNames.push('SearchOptionFocused');\n    }\n\n    return (\n      <div\n        className={classNames.join(' ')}\n        key={key}\n        onClick={() => selectValue(option)}\n        onMouseOver={() => focusOption(option)}\n        style={style}\n      >\n        {option.label}\n      </div>\n    );\n  }\n\n  render() {\n    const { search, searchConfig } = this.props;\n\n    const filterOptions = this.filterOptions;\n    const options = this.options;\n\n    return (\n      <div className=\"SearchView\">\n        <div className=\"section-head\">Search</div>\n\n        <div className=\"control-item\">\n          <VirtualizedSelect\n            name=\"app-search\"\n            options={options}\n            filterOptions={filterOptions}\n            value={search}\n            onChange={this.handleSearchChange}\n            noResultsText=\"No Results Found\"\n            placeholder={searchConfig.description}\n            multi\n            optionRenderer={this.renderOption}\n            onInputChange={this.handleInputChange}\n          />\n        </div>\n        <hr />\n      </div>\n    );\n  }\n}\n\nexport default SearchView;\n","import PropTypes from 'prop-types';\nimport React from 'react';\n\n/*\nThe react-select version of Creatable throws a runtime error about\n the 'ref' prop. This component is a direct copy of the react-select\n version\n https://github.com/JedWatson/react-select/blob/master/src/Creatable.js\n but with that error fixed.\n*/\n\n// can import these directly!\nimport Select, { defaultMenuRenderer, defaultFilterOptions } from 'react-select';\n\nclass CreatableSelect extends React.Component {\n  constructor(props, context) {\n    super(props, context);\n\n    this.filterOptions = this.filterOptions.bind(this);\n    this.menuRenderer = this.menuRenderer.bind(this);\n    this.onInputKeyDown = this.onInputKeyDown.bind(this);\n    this.onInputChange = this.onInputChange.bind(this);\n    this.onOptionSelect = this.onOptionSelect.bind(this);\n  }\n\n  onInputKeyDown(event) {\n    const { shouldKeyDownEventCreateNewOption, onInputKeyDown } = this.props;\n    const focusedOption = this.select.getFocusedOption();\n\n    if (\n      focusedOption &&\n      focusedOption === this._createPlaceholderOption &&\n      shouldKeyDownEventCreateNewOption({ keyCode: event.keyCode })\n    ) {\n      this.createNewOption();\n\n      // Prevent decorated Select from doing anything additional with this keyDown event\n      event.preventDefault();\n    } else if (onInputKeyDown) {\n      onInputKeyDown(event);\n    }\n  }\n\n  onOptionSelect(option) {\n    if (option === this._createPlaceholderOption) {\n      this.createNewOption();\n    } else {\n      this.select.selectValue(option);\n    }\n  }\n\n  onInputChange(input) {\n    const { onInputChange } = this.props;\n\n    // This value may be needed in between Select mounts (when this.select is null)\n    this.inputValue = input;\n\n    if (onInputChange) {\n      this.inputValue = onInputChange(input);\n    }\n\n    return this.inputValue;\n  }\n\n  createNewOption() {\n    const { isValidNewOption, newOptionCreator, onNewOptionClick, options = [] } = this.props;\n\n    if (isValidNewOption({ label: this.inputValue })) {\n      const option = newOptionCreator({\n        label: this.inputValue,\n        labelKey: this.labelKey,\n        valueKey: this.valueKey,\n      });\n      const isOptionUnique = this.isOptionUnique({ option, options });\n\n      // Don't add the same option twice.\n      if (isOptionUnique) {\n        if (onNewOptionClick) {\n          onNewOptionClick(option);\n        } else {\n          options.unshift(option);\n\n          this.select.selectValue(option);\n        }\n      }\n    }\n  }\n\n  filterOptions(...params) {\n    const { filterOptions, isValidNewOption, promptTextCreator } = this.props;\n\n    // TRICKY Check currently selected options as well.\n    // Don't display a create-prompt for a value that's selected.\n    // This covers async edge-cases where a newly-created Option isn't yet in the async-loaded array.\n    const excludeOptions = params[2] || [];\n\n    const filteredOptions = filterOptions(...params) || [];\n\n    if (isValidNewOption({ label: this.inputValue })) {\n      const { newOptionCreator } = this.props;\n\n      const option = newOptionCreator({\n        label: this.inputValue,\n        labelKey: this.labelKey,\n        valueKey: this.valueKey,\n      });\n\n      // TRICKY Compare to all options (not just filtered options) in case option has already been selected).\n      // For multi-selects, this would remove it from the filtered list.\n      const isOptionUnique = this.isOptionUnique({\n        option,\n        options: excludeOptions.concat(filteredOptions),\n      });\n\n      if (isOptionUnique) {\n        const prompt = promptTextCreator(this.inputValue);\n\n        this._createPlaceholderOption = newOptionCreator({\n          label: prompt,\n          labelKey: this.labelKey,\n          valueKey: this.valueKey,\n        });\n\n        filteredOptions.unshift(this._createPlaceholderOption);\n      }\n    }\n\n    return filteredOptions;\n  }\n\n  isOptionUnique({ option, options }) {\n    const { isOptionUnique } = this.props;\n\n    options = options || this.props.options;\n\n    return isOptionUnique({\n      labelKey: this.labelKey,\n      option,\n      options,\n      valueKey: this.valueKey,\n    });\n  }\n\n  menuRenderer(params) {\n    const { menuRenderer } = this.props;\n\n    return menuRenderer({\n      ...params,\n      onSelect: this.onOptionSelect,\n      selectValue: this.onOptionSelect,\n    });\n  }\n\n  focus() {\n    this.select.focus();\n  }\n\n  render() {\n    const { refProp, ...restProps } = this.props;\n\n    let { children } = this.props;\n\n    // We can't use destructuring default values to set the children,\n    // because it won't apply work if `children` is null. A falsy check is\n    // more reliable in real world use-cases.\n    if (!children) {\n      children = defaultChildren;\n    }\n\n    const props = {\n      ...restProps,\n      allowCreate: true,\n      filterOptions: this.filterOptions,\n      menuRenderer: this.menuRenderer,\n      onInputChange: this.onInputChange,\n      onInputKeyDown: this.onInputKeyDown,\n      ref: ref => {\n        this.select = ref;\n\n        // These values may be needed in between Select mounts (when this.select is null)\n        if (ref) {\n          this.labelKey = ref.props.labelKey;\n          this.valueKey = ref.props.valueKey;\n        }\n        if (refProp) {\n          refProp(ref);\n        }\n      },\n    };\n\n    return children(props);\n  }\n}\n\nconst defaultChildren = props => <Select {...props} />;\n\nconst isOptionUnique = ({ option, options, labelKey, valueKey }) => {\n  if (!options || !options.length) {\n    return true;\n  }\n\n  return (\n    options.filter(\n      existingOption =>\n        existingOption[labelKey] === option[labelKey] ||\n        existingOption[valueKey] === option[valueKey],\n    ).length === 0\n  );\n};\n\nconst isValidNewOption = ({ label }) => !!label;\n\nconst newOptionCreator = ({ label, labelKey, valueKey }) => {\n  const option = {};\n  option[valueKey] = label;\n  option[labelKey] = label;\n  option.className = 'Select-create-option-placeholder';\n\n  return option;\n};\n\nconst promptTextCreator = label => `Create option \"${label}\"`;\n\nconst shouldKeyDownEventCreateNewOption = ({ keyCode }) => {\n  switch (keyCode) {\n    case 9: // TAB\n    case 13: // ENTER\n    case 188: // COMMA\n      return true;\n    default:\n      return false;\n  }\n};\n\n// Default prop methods\nCreatableSelect.isOptionUnique = isOptionUnique;\nCreatableSelect.isValidNewOption = isValidNewOption;\nCreatableSelect.newOptionCreator = newOptionCreator;\nCreatableSelect.promptTextCreator = promptTextCreator;\nCreatableSelect.shouldKeyDownEventCreateNewOption = shouldKeyDownEventCreateNewOption;\n\nCreatableSelect.defaultProps = {\n  filterOptions: defaultFilterOptions,\n  isOptionUnique,\n  isValidNewOption,\n  menuRenderer: defaultMenuRenderer,\n  newOptionCreator,\n  promptTextCreator,\n  shouldKeyDownEventCreateNewOption,\n};\n\nCreatableSelect.propTypes = {\n  // Child function responsible for creating the inner Select component\n  // This component can be used to compose HOCs (eg Creatable and Async)\n  // (props: Object): PropTypes.element\n  children: PropTypes.func,\n\n  // See Select.propTypes.filterOptions\n  filterOptions: PropTypes.any,\n\n  // Searches for any matching option within the set of options.\n  // This function prevents duplicate options from being created.\n  // ({ option: Object, options: Array, labelKey: string, valueKey: string }): boolean\n  isOptionUnique: PropTypes.func,\n\n  // Determines if the current input text represents a valid option.\n  // ({ label: string }): boolean\n  isValidNewOption: PropTypes.func,\n\n  // See Select.propTypes.menuRenderer\n  menuRenderer: PropTypes.any,\n\n  // Factory to create new option.\n  // ({ label: string, labelKey: string, valueKey: string }): Object\n  newOptionCreator: PropTypes.func,\n\n  // input change handler: function (inputValue) {}\n  onInputChange: PropTypes.func,\n\n  // input keyDown handler: function (event) {}\n  onInputKeyDown: PropTypes.func,\n\n  // new option click handler: function (option) {}\n  onNewOptionClick: PropTypes.func,\n\n  // See Select.propTypes.options\n  options: PropTypes.array,\n\n  // Creates prompt/placeholder option text.\n  // (filterText: string): string\n  promptTextCreator: PropTypes.func,\n\n  // This is the only change: ref => refProp.\n  // the prop 'ref' is a special prop and so\n  // throws an error:\n  // https://reactjs.org/warnings/special-props.html\n  refProp: PropTypes.func,\n\n  // Decides if a keyDown event (eg its `keyCode`) should result in the creation of a new option.\n  shouldKeyDownEventCreateNewOption: PropTypes.func,\n};\n\nexport default CreatableSelect;\n","import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport VirtualizedSelect from 'react-virtualized-select';\nimport Select from 'react-select';\nimport Creatable from './CreatableFixed';\nimport isEmpty from 'lodash.isempty';\n\n/**\n * Helper to make options from filter data\n */\nfunction makeOptions(values) {\n  return values.map(v => {\n    return {\n      label: v.label,\n      value: v.value,\n    };\n  });\n}\n\nclass MultiSelect extends PureComponent {\n  static propTypes = {\n    allowMulti: PropTypes.bool,\n    description: PropTypes.string,\n    disabled: PropTypes.bool,\n    handleChange: PropTypes.func.isRequired,\n    id: PropTypes.string.isRequired,\n    label: PropTypes.string.isRequired,\n    multi: PropTypes.bool,\n    placeholder: PropTypes.string,\n    value: PropTypes.any,\n    values: PropTypes.arrayOf(\n      PropTypes.shape({\n        label: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n        value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n      }),\n    ),\n  };\n\n  static defaultProps = {\n    allowMulti: false,\n    handleChange: () => {},\n    multi: true,\n    values: [],\n    value: undefined,\n    id: '',\n    label: '',\n    disabled: false,\n  };\n\n  constructor() {\n    super();\n    this.handleChange = this.handleChange.bind(this);\n    this.handleAddMultiple = this.handleAddMultiple.bind(this);\n  }\n\n  handleChange(newValue) {\n    let newVal;\n    if (isEmpty(newValue)) {\n      newVal = undefined;\n    } else if (newValue instanceof Array) {\n      newVal = newValue.map(d => d.value);\n    } else {\n      newVal = newValue.value;\n    }\n\n    this.props.handleChange(this.props.id, newVal);\n  }\n\n  handleAddMultiple(option) {\n    const { values } = this.props;\n    const valueMap = {};\n    values.forEach(v => (valueMap[v.value] = v));\n    const newValues = option.value.split(';').map(v => v.trim());\n\n    // only allow values that exist in current values\n    const filteredNewValues = newValues.filter(nValue => valueMap[nValue]);\n\n    if (filteredNewValues.length > 0) {\n      this.props.handleChange(this.props.id, filteredNewValues);\n    } else {\n      console.log('no valid values to add in: ', newValues);\n    }\n  }\n\n  render() {\n    const { addMultipleIds, id, values, multi, placeholder, disabled, value } = this.props;\n\n    const options = makeOptions(values);\n    const selectComponent = addMultipleIds ? Creatable : Select;\n\n    return (\n      <div className=\"MultiSelect\">\n        <VirtualizedSelect\n          name={`multi-select-${id}`}\n          options={options}\n          optionHeight={44}\n          value={value}\n          onChange={this.handleChange}\n          multi={multi}\n          placeholder={placeholder}\n          disabled={disabled}\n          onNewOptionClick={this.handleAddMultiple}\n          selectComponent={selectComponent}\n          promptTextCreator={() => \"Add multiple values with ';'\"}\n        />\n      </div>\n    );\n  }\n}\n\nexport default MultiSelect;\n","import React, { PureComponent } from 'react';\nimport { Button } from 'react-bootstrap';\nimport PropTypes from 'prop-types';\n\nimport MultiSelect from '../MultiSelect/MultiSelect';\n\nimport './FilterView.scss';\n\n/**\n * This view displays and manages options for filtering the network view.\n */\nclass FilterView extends PureComponent {\n  static propTypes = {\n    filterConfigs: PropTypes.array,\n    filters: PropTypes.object,\n    handleChange: PropTypes.func.isRequired,\n  };\n\n  static defaultProps = {\n    filters: {},\n  };\n\n  constructor(props) {\n    super(props);\n\n    this.handleFilterChange = this.handleFilterChange.bind(this);\n    this.handleFilterClear = this.handleFilterClear.bind(this);\n  }\n\n  handleFilterClear() {\n    this.props.handleChange({});\n  }\n\n  handleFilterChange(filterId, filterValue) {\n    const filterVals = this.props.filters;\n    const newVal = Object.assign({}, filterVals, {\n      [filterId]: filterValue,\n    });\n    this.props.handleChange(newVal);\n  }\n\n  renderFilterTitle(filter) {\n    return (\n      <div className=\"toggle-area\">\n        <label htmlFor=\"toggle-links\">{filter.label}</label>\n      </div>\n    );\n  }\n\n  renderFilterSelect(filter) {\n    const { filters, focusNode } = this.props;\n\n    const disabled = Boolean(focusNode);\n\n    const filterId = filter.id;\n    let filterValue = filters[filterId];\n\n    return (\n      <MultiSelect\n        key={`filter-control-${filter.id}`}\n        id={filter.id}\n        label={filter.label}\n        addMultipleIds={filter.addMultipleIds}\n        description={filter.description}\n        values={filter.values}\n        value={filterValue}\n        handleChange={this.handleFilterChange}\n        disabled={disabled}\n      />\n    );\n  }\n\n  render() {\n    const { filterConfigs } = this.props;\n\n    return (\n      <div className=\"FilterView\">\n        <div className=\"title-area\">\n          <div className=\"section-head\">Filter</div>\n          <div className=\"clear-link\">\n            <Button variant=\"link\" onClick={this.handleFilterClear}>\n              clear\n            </Button>\n          </div>\n        </div>\n\n        {filterConfigs.map(filterConfig => {\n          return (\n            <div className=\"control-item\" key={`filter-control-${filterConfig.id}`}>\n              {this.renderFilterTitle(filterConfig)}\n              {this.renderFilterSelect(filterConfig)}\n            </div>\n          );\n        })}\n        <hr />\n      </div>\n    );\n  }\n}\n\nexport default FilterView;\n","import React from 'react';\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport {\n  faQuestionCircle,\n  faExpandArrowsAlt,\n  faSearch,\n  faTable,\n  faFileDownload,\n  faChevronLeft,\n  faExternalLinkAlt,\n} from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\n/**\n * Adds subset of Font Awesome fonts to Font Awesome library,\n * as described here:\n * https://github.com/FortAwesome/react-fontawesome#build-a-library-to-reference-icons-throughout-your-app-more-conveniently\n */\nexport function initLibrary() {\n  library.add(\n    faQuestionCircle,\n    faExpandArrowsAlt,\n    faSearch,\n    faTable,\n    faFileDownload,\n    faChevronLeft,\n    faExternalLinkAlt,\n  );\n}\n\n/*\n * Icons for application. Kept in one place to improve reuse\n * and avoid complications of upgrading / changing icon source.\n */\n\nexport const HelpIcon = props => <FontAwesomeIcon icon=\"question-circle\" {...props} />;\nexport const ExpandIcon = props => <FontAwesomeIcon icon=\"expand-arrows-alt\" {...props} />;\nexport const SearchIcon = props => <FontAwesomeIcon icon=\"search\" {...props} />;\nexport const TableIcon = props => <FontAwesomeIcon icon=\"table\" {...props} />;\nexport const DownloadIcon = props => <FontAwesomeIcon icon=\"file-download\" {...props} />;\nexport const LeftIcon = props => <FontAwesomeIcon icon=\"chevron-left\" {...props} />;\nexport const ExternalLinkIcon = props => <FontAwesomeIcon icon=\"external-link-alt\" {...props} />;\n","import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\n\nimport './HelpIcon.scss';\n\nimport { Tooltip } from 'react-tippy';\nimport { HelpIcon as Help } from '../../components/Icons/Icons';\n\nclass HelpIcon extends PureComponent {\n  static propTypes = {\n    text: PropTypes.string,\n  };\n\n  static defaultProps = {\n    text: '',\n  };\n\n  render() {\n    const { text } = this.props;\n\n    return (\n      <Tooltip\n        // options\n        title={text}\n        position=\"top\"\n        trigger=\"click\"\n        theme=\"light\"\n        className=\"HelpTooltip\"\n      >\n        <Help className=\"HelpIcon\" />\n      </Tooltip>\n    );\n  }\n}\n\nexport default HelpIcon;\n","import React, { PureComponent } from 'react';\nimport { Button } from 'react-bootstrap';\nimport PropTypes from 'prop-types';\nimport Slider from 'rc-slider';\nimport Tooltip from 'rc-tooltip';\nimport * as d3 from 'd3';\n\nimport HelpIcon from '../HelpIcon/HelpIcon';\nimport MultiSelect from '../MultiSelect/MultiSelect';\n\nimport 'rc-slider/assets/index.css';\nimport './DisplayView.scss';\n\nconst createSliderWithTooltip = Slider.createSliderWithTooltip;\nconst Range = createSliderWithTooltip(Slider.Range);\nconst Handle = Slider.Handle;\n\nconst handle = props => {\n  const { value, dragging, index, ...restProps } = props;\n  return (\n    <Tooltip\n      prefixCls=\"rc-slider-tooltip\"\n      overlay={value}\n      visible={dragging}\n      placement=\"top\"\n      key={index}\n    >\n      <Handle value={value} {...restProps} />\n    </Tooltip>\n  );\n};\n\nconst configShape = PropTypes.shape({\n  description: PropTypes.string,\n  id: PropTypes.string,\n  label: PropTypes.string,\n  type: PropTypes.string,\n  values: PropTypes.arrayOf(\n    PropTypes.shape({\n      label: PropTypes.string,\n      value: PropTypes.string,\n    }),\n  ),\n});\n\n/**\n * This view displays and manages options for filtering the network view.\n */\nclass DisplayView extends PureComponent {\n  static propTypes = {\n    handleChange: PropTypes.func.isRequired,\n    showCount: PropTypes.number,\n    sortByConfig: configShape,\n    viewConfigs: PropTypes.array.isRequired,\n  };\n\n  static defaultProps = {\n    handleChange: () => {},\n    viewConfigs: [],\n  };\n\n  /**\n   *\n   */\n  constructor(props) {\n    super(props);\n    this.handleDisplayChange = this.handleDisplayChange.bind(this);\n    this.handleDisplayClear = this.handleDisplayClear.bind(this);\n    this.handleSelectAll = this.handleSelectAll.bind(this);\n  }\n\n  /**\n   * handle change callbackc\n   *\n   * @param {String} id Id of option to change\n   * @param {Any} value New Value\n   */\n  handleDisplayChange(id, value) {\n    this.props.handleChange(id, value);\n  }\n\n  /**\n   * Handle clear callback\n   */\n  handleDisplayClear() {\n    const { viewConfigs } = this.props;\n\n    viewConfigs.forEach(c => {\n      this.props.handleChange(c.id, undefined);\n    });\n  }\n\n  /**\n   * Handle select all callback\n   *\n   * @param {Object} config The config for the option to select all of\n   */\n  handleSelectAll(config) {\n    const values = config.values.map(v => v.value);\n    this.props.handleChange(config.id, values);\n  }\n\n  /**\n   * Renders dropdown\n   *\n   * @param {Object} config Config object for option\n   */\n  renderDropDown(config) {\n    const currentValue = this.props[config.id];\n\n    let help = null;\n\n    if (config.description) {\n      help = <HelpIcon text={config.description} />;\n    }\n\n    const multi = !!config.multi;\n\n    let selectAll = null;\n    if (config.selectAll) {\n      selectAll = (\n        <Button\n          className=\"select-all\"\n          variant=\"link\"\n          onClick={this.handleSelectAll.bind(this, config)}\n        >\n          select all\n        </Button>\n      );\n    }\n\n    return (\n      <div className=\"control-item\" key={config.id}>\n        <label htmlFor={config.id}>{config.label}</label>\n        {help}\n        <MultiSelect\n          id={config.id}\n          description={config.description}\n          values={config.values}\n          value={currentValue}\n          label={config.label}\n          handleChange={this.handleDisplayChange}\n          multi={multi}\n        />\n        {selectAll}\n      </div>\n    );\n  }\n\n  /**\n   *\n   * @param {Object} config\n   */\n  renderSlider(config) {\n    const [min, max] = config.range;\n\n    let currentValue = this.props[config.id];\n    if (currentValue === undefined || currentValue === null) {\n      currentValue = config.default;\n    }\n\n    const step = config.step;\n\n    const range = d3.range(min, max + 1, step);\n    let marks = config.marks;\n\n    if (!marks) {\n      marks = range.reduce((memo, i) => {\n        memo[i] = i;\n        return memo;\n      }, {});\n    }\n\n    return (\n      <div className=\"control-item slider-option\" key={config.id}>\n        <label>\n          {config.label}: {currentValue} {config.unit}\n        </label>\n        <Slider\n          min={min}\n          max={max}\n          value={currentValue}\n          marks={marks}\n          step={step}\n          onChange={value => {\n            this.handleDisplayChange(config.id, value);\n          }}\n          disabled={false}\n          handle={handle}\n        />\n      </div>\n    );\n  }\n\n  /**\n   *\n   * @param {Object} config\n   */\n  renderRange(config) {\n    const [min, max] = config.range;\n\n    const currentValue = this.props[config.id] || config.default;\n    const step = config.step;\n\n    const range = d3.range(min, max + 1, step);\n    let marks = config.marks;\n\n    if (!marks) {\n      marks = range.reduce((memo, i) => {\n        memo[i] = i;\n        return memo;\n      }, {});\n    }\n\n    return (\n      <div className=\"control-item slider-option\" key={config.id}>\n        <label>\n          {config.label}: {currentValue[0]} - {currentValue[1]} {config.unit}\n        </label>\n        <Range\n          min={min}\n          max={max}\n          value={currentValue}\n          marks={marks}\n          step={step}\n          onChange={value => {\n            this.handleDisplayChange(config.id, value);\n          }}\n          disabled={false}\n          handle={handle}\n        />\n      </div>\n    );\n  }\n\n  /**\n   *\n   * @param {Object} config\n   */\n  renderTitle(config) {\n    let reset = null;\n    if (config.reset) {\n      reset = (\n        <div className=\"clear-link\">\n          <Button variant=\"link\" onClick={this.handleDisplayClear}>\n            clear\n          </Button>\n        </div>\n      );\n    }\n\n    return (\n      <div key={config.id} className=\"title-area\">\n        <div key={config.id} className=\"section-head\">\n          {config.label}\n        </div>\n        {reset}\n      </div>\n    );\n  }\n\n  /**\n   *\n   * @param {Obect} config\n   */\n  renderViewControl(config) {\n    switch (config.type) {\n      case 'slider': {\n        return this.renderSlider(config);\n      }\n      case 'range': {\n        return this.renderRange(config);\n      }\n      case 'title': {\n        return this.renderTitle(config);\n      }\n      default: {\n        return this.renderDropDown(config);\n      }\n    }\n  }\n\n  /**\n   *\n   */\n  render() {\n    const { viewConfigs } = this.props;\n\n    return (\n      <div className=\"DisplayOptions\">\n        <div className=\"title-area\">\n          <div className=\"section-head\">View</div>\n          <div className=\"clear-link\">\n            <Button variant=\"link\" onClick={this.handleDisplayClear}>\n              clear\n            </Button>\n          </div>\n        </div>\n\n        {viewConfigs.map(this.renderViewControl.bind(this))}\n        <hr />\n      </div>\n    );\n  }\n}\n\nexport default DisplayView;\n","/**\n * Converts snake_case_string to CamelCaseString.\n *\n * @param {String} s snake_case_string\n * @return {String} CamelCaseString\n */\nexport function snakeToCamel(s) {\n  if (!s) return s;\n  return s.replace(/(_\\w)/g, function(m) {\n    return m[1].toUpperCase();\n  });\n}\n\n/**\n * Capitalize the first letter of the input string\n * @param {String} s input String\n * @return {String} Output String\n */\nexport function capitalize(s) {\n  if (!s) return s;\n  return s.charAt(0).toUpperCase() + s.slice(1);\n}\n\n/**\n * Converts snake_string_value to a sentence,\n * by replacing the underscores with spaces.\n *\n * @param {String} s Input snake_case_string\n * @return {String} Sentence.\n */\nexport function snakeToSentence(s) {\n  if (!s) return s;\n  return s.replace(/(_)/g, ' ');\n}\n\n/**\n * Converts snake_string_value to a sentence,\n * by replacing the underscores with spaces.\n * All words in the sentence are capitalized.\n *\n * @param {String} s Input snake_case_string\n * @return {String} Capitalized Sentence.\n */\nexport function snakeToCapSentence(s) {\n  if (!s) return s;\n  const newSentence = s.replace(/(_)+/g, ' ');\n  const words = newSentence.split(' ');\n  return words.map(w => capitalize(w)).join(' ');\n}\n\n/**\n * Converts value to a display string, appropriate\n * for displaying as a label.\n *\n * @param {Any} value The value to display\n * @return {String} value to display\n */\nexport function displayLabelFor(value) {\n  let displayValue = value;\n\n  if (Array.isArray(value)) {\n    displayValue = value.join(' / ');\n  }\n\n  if (typeof variable === 'boolean') {\n    displayValue = value ? 'true' : 'false';\n  }\n\n  return displayValue;\n}\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport SearchView from './SearchView';\nimport FilterView from './FilterView';\nimport DisplayView from './DisplayView';\nimport { uniqueValues } from '../../utils/collection';\nimport { removeEmptyKeys } from '../../utils/object';\nimport { capitalize } from '../../utils/string';\n\nimport './Controls.scss';\n\n/**\n * Pull out an array of {value, label} objects for\n * a given property in the dataDefs\n */\nfunction extractProperties(dataDefs, propertyName) {\n  const properties = dataDefs\n    .filter(d => d[propertyName])\n    .map(def => {\n      return { value: def.id, label: def.label };\n    });\n\n  return properties;\n}\n\n/**\n * Side panel controls display. Powered by controlsConfig and dataDefs.\n * A Control is composed of a Search, Display, and Filter sections,\n * all implemented as separate components. Each section is optional\n * in the Control display and it is up to teh controlsConfig to configure\n * which sections are displayed.\n */\nclass Controls extends Component {\n  static propTypes = {\n    /**\n     * Configuration of different controls sections.\n     * Provides details on how the controls should be displayed.\n     */\n    controlsConfig: PropTypes.object.isRequired,\n\n    /**\n     * Array of data definitions.\n     */\n    dataDefs: PropTypes.array.isRequired,\n\n    /**\n     * Filters object\n     */\n    filters: PropTypes.object,\n\n    /**\n     * Filters change callback\n     */\n    onChangeFilters: PropTypes.func,\n\n    /**\n     * Search change callback\n     */\n    onChangeSearch: PropTypes.func,\n\n    /**\n     * Search values\n     */\n    search: PropTypes.array,\n\n    /**\n     * Should the controls be displayed?\n     */\n    shouldDisplayControls: PropTypes.bool,\n  };\n\n  static defaultProps = {\n    shouldDisplayControls: true,\n    onChangeSearch: () => {},\n    onChangeFilters: () => {},\n    footer: null,\n  };\n\n  /**\n   * Create configuration object for filter section\n   */\n  static generateFilterConfig(dataDefs, data) {\n    // We generate filter options based on data defs.\n    const filterData = data || [];\n    const filterValues = dataDefs\n      .filter(d => d.filterBy)\n      .map(filterDef => {\n        const level = filterDef.level;\n        switch (level) {\n          case 'Categorical':\n          case 'Nominal': {\n            const id = filterDef.id;\n            const label = filterDef.label;\n            const description = filterDef.description;\n            const addMultipleIds = filterDef.addMultipleIds;\n            const values = uniqueValues(filterData, id).map(d => {\n              return { value: d, label: d };\n            });\n            return { id, level, values, label, description, addMultipleIds };\n          }\n          default:\n            return undefined;\n        }\n      });\n\n    return filterValues.filter(d => d !== undefined);\n  }\n\n  /**\n   * Create configuration object for view section\n   */\n  static generateViewConfig(viewConfig, dataDefs) {\n    let values = [];\n    if (viewConfig.values) {\n      values = viewConfig.values;\n    } else {\n      values = extractProperties(dataDefs, viewConfig.id);\n    }\n    return Object.assign({}, viewConfig, { values });\n  }\n\n  /**\n   * Create configuration object for search section\n   */\n  static generateSearchConfig(dataDefs, data, searchConfig = {}) {\n    // We generate filter options based on data defs.\n    const searchProps = dataDefs.filter(d => d.searchBy);\n\n    const desc = searchConfig.description || 'Search';\n\n    let items = [];\n    if (searchProps.length > 0) {\n      items = data.map(node => {\n        const item = {};\n        searchProps.forEach(prop => {\n          item[prop.id] = node[prop.id];\n        });\n        // TODO: Fix hardcoded label / id\n        item.value = node.id;\n        item.label = node.name;\n        return item;\n      });\n    }\n\n    return {\n      id: 'search',\n      label: 'Search',\n      description: desc,\n      values: items,\n      searchProps,\n    };\n  }\n\n  /**\n   * Constructor\n   */\n  constructor(props) {\n    super(props);\n    this.handleFilterChange = this.handleFilterChange.bind(this);\n    this.handleDisplayChange = this.handleDisplayChange.bind(this);\n    this.handleSearchChange = this.handleSearchChange.bind(this);\n\n    this.state = {\n      filterConfigs: [],\n      viewConfigs: [],\n    };\n  }\n\n  /**\n   * React Lifecycle method\n   */\n  componentDidMount() {\n    this.updateConfigs(this.props);\n  }\n\n  /**\n   * React Lifecycle method\n   */\n  componentWillReceiveProps(nextProps) {\n    let update = false;\n\n    if (this.props.data !== nextProps.data) {\n      update = true;\n    }\n\n    if (update) {\n      this.updateConfigs(nextProps);\n    }\n  }\n\n  /**\n   * React Lifecycle method\n   */\n  shouldComponentUpdate(nextProps, nextState) {\n    const propKeys = Object.keys(nextProps);\n    let updated = [];\n    propKeys.forEach(k => {\n      if (!this.props[k] || !(this.props[k] === nextProps[k])) {\n        updated.push(k);\n      }\n    });\n\n    const stateKeys = Object.keys(nextState);\n    stateKeys.forEach(k => {\n      if (!this.state[k] || !(this.state[k] === nextState[k])) {\n        updated.push(k);\n      }\n    });\n\n    const ignoreProps = ['children'];\n    ignoreProps.forEach(p => {\n      const ignoreIndex = updated.indexOf(p);\n      if (ignoreIndex >= 0) {\n        updated.splice(ignoreIndex, 1);\n      }\n    });\n\n    return updated.length > 0;\n  }\n\n  /**\n   * Callback for filter section control change\n   */\n  handleFilterChange(newVal) {\n    const noEmpty = removeEmptyKeys(newVal);\n    this.props.onChangeFilters(noEmpty);\n  }\n\n  /**\n   * Callback for search section change\n   */\n  handleSearchChange(newVal) {\n    const { onChangeSearch } = this.props;\n\n    if (onChangeSearch) {\n      onChangeSearch(newVal);\n    }\n  }\n\n  /**\n   * Callback for display section control change\n   */\n  handleDisplayChange(propertyId, value) {\n    const handler = `onChange${capitalize(propertyId)}`;\n    if (this.props[handler]) {\n      this.props[handler](value);\n    } else {\n      console.error('WARNING: No on change for: ' + handler);\n    }\n  }\n\n  /**\n   * Regenerate the configurations for the different control sections\n   *\n   * @param {Object} props Props\n   */\n  updateConfigs(props) {\n    const { data, dataDefs, controlsConfig } = props;\n\n    const filterConfigs = Controls.generateFilterConfig(dataDefs, data);\n\n    const searchConfig = Controls.generateSearchConfig(dataDefs, data, controlsConfig.search);\n\n    const viewConfigs = [];\n    controlsConfig.view.forEach(view => {\n      viewConfigs.push(Controls.generateViewConfig(view, dataDefs));\n    });\n\n    this.setState({\n      filterConfigs,\n      viewConfigs,\n      searchConfig,\n      ...viewConfigs,\n    });\n  }\n\n  /**\n   * Render filter section\n   */\n  renderFilterView() {\n    const { controlsConfig, filters } = this.props;\n    const { filterConfigs } = this.state;\n\n    if (controlsConfig.filter && !controlsConfig.filter.display) {\n      return null;\n    }\n\n    return (\n      <FilterView\n        key={'filter'}\n        filterConfigs={filterConfigs}\n        filters={filters}\n        handleChange={this.handleFilterChange}\n      />\n    );\n  }\n\n  /**\n   * Render search section.\n   */\n  renderSearchView() {\n    const { controlsConfig, search } = this.props;\n    const { searchConfig } = this.state;\n\n    // don't show search if we haven't enabled it\n    if (!controlsConfig.search || (controlsConfig.search && !controlsConfig.search.display)) {\n      return null;\n    }\n\n    return (\n      <SearchView\n        key={'search'}\n        search={search}\n        searchConfig={searchConfig}\n        handleChange={this.handleSearchChange}\n      />\n    );\n  }\n\n  /**\n   * Render display section\n   */\n  renderDisplayView() {\n    const { filters, controlsConfig, ...others } = this.props;\n\n    const { viewConfigs } = this.state;\n\n    if (!viewConfigs || viewConfigs.length === 0) {\n      return null;\n    }\n\n    return (\n      <DisplayView\n        key={'display'}\n        viewConfigs={viewConfigs}\n        handleChange={this.handleDisplayChange}\n        {...others}\n      />\n    );\n  }\n\n  /**\n   * Render footer.\n   */\n  renderFooter() {\n    const { footer } = this.props;\n\n    return <div className=\"footer\">{footer}</div>;\n  }\n\n  /**\n   * React render method.\n   */\n  render() {\n    const { shouldDisplayControls, children } = this.props;\n\n    let controls = [];\n\n    if (shouldDisplayControls) {\n      controls = [this.renderSearchView(), this.renderDisplayView(), this.renderFilterView()];\n    }\n\n    return (\n      <div className=\"Controls\">\n        {children}\n        <hr />\n        {controls}\n        {this.renderFooter()}\n      </div>\n    );\n  }\n}\n\nexport default Controls;\n","import uniq from 'lodash.uniq';\nimport isEmpty from 'lodash.isempty';\nimport isFinite from 'lodash.isfinite';\nimport get from 'lodash.get';\nimport * as d3 from 'd3';\n\n/**\n * For a given array, return the value associated with attr from\n * the first element in the array. If the array is empty, return\n * the defaultValue.\n *\n * @param {Array} array Array of values to pick from\n * @param {String|Array} attr Attribute to select. Can also be a lodash.get style selector.\n * @param {Any} defaultValue Value to use if array is empty\n */\nexport function pickFirst(array, attr, defaultValue = null) {\n  return array && array.length > 0 ? get(array[0], attr, defaultValue) : defaultValue;\n}\n\n/**\n * Returns the unique values of a given property of a collection.\n *   Value associated with the property can be a string,\n *   a number, or an array\n * @param  {Array} collection\n * @param  {String} propertyName\n * @return {Array} an array of unique values.\n */\nexport function uniqueValues(collection, propertyName) {\n  if (!collection) {\n    return [];\n  }\n\n  let allValues = collection.map(d => {\n    if (Array.isArray(d[propertyName])) {\n      return uniq(d[propertyName]);\n    }\n    return d[propertyName];\n  });\n\n  // if array of arrays, we need to flatten\n  // one of many ways to flatten\n  // http://www.jstips.co/en/javascript/flattening-multidimensional-arrays-in-javascript/\n  allValues = [].concat(...allValues);\n\n  return uniq(allValues)\n    .filter(d => isFinite(d) || !isEmpty(d))\n    .sort(d3.ascending);\n}\n\n/**\n * Returns true if collection includes any in list\n * @param  {Array} collection Array of values to search\n * @param  {Array} list values to check for\n * @returns {Bool} true if collection contains any\n *  of the elements in list\n */\nexport function includesAny(collection, list) {\n  if (!collection || !list) {\n    return false;\n  }\n\n  if (!Array.isArray(collection)) {\n    collection = [collection];\n  }\n\n  // array.some tests whether at least one element\n  // in the array passes the test\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some\n  return collection.some(r => list.includes(r));\n}\n\n/**\n * Returns true if collection contains\n * every value inside list\n *\n * @param {Array} collection Array to check\n * @param {Array} list Array of values collection should include\n * @returns {Boolean} true if collection contains\n * every value inside list, false otherwise.\n */\nexport function includesEvery(collection, list) {\n  if (!collection) {\n    return false;\n  }\n\n  let pass = true;\n\n  // use for ... of to allow\n  // for early break if missing\n  // val is found.\n  for (const val of list) {\n    if (!collection.includes(val)) {\n      pass = false;\n      break;\n    }\n  }\n\n  return pass;\n}\n\n/**\n * If value is contained in collection, remove it.\n * If value is not contained in collection, add it.\n * @param  {Array} collection\n * @param  {Any} value\n * @returns {Array} new array with value toggled\n */\nexport function toggleValue(collection, value) {\n  // Use new Array\n  let newCollection = collection ? collection.slice() : [];\n\n  const valueIndex = newCollection.indexOf(value);\n\n  if (valueIndex >= 0) {\n    newCollection.splice(valueIndex, 1);\n  } else {\n    newCollection.push(value);\n  }\n\n  return newCollection;\n}\n\n/**\n * Creates a new array with all the values of collection in it and all the values of newValues in it.\n * Duplicate values are not added.\n * Values are extracted from newItems using the provided accessorFunc to add to collection.\n *\n * @param {Array} collection Array simple values.\n * @param {Array} newItems Array of Objects.\n * @param {Function} accessorFunc Used to determine if a\n * @returns {Array} Array containing the union of collection and values extracted from newItems via accessorFunc.\n */\nexport function addIfMissing(collection, newItems, accessorFunc = d => d.key) {\n  if (!collection) {\n    collection = [];\n  }\n  const newCollection = collection.slice();\n\n  newItems.forEach(d => {\n    if (!newCollection.includes(accessorFunc(d))) {\n      newCollection.push(accessorFunc(d));\n    }\n  });\n\n  return newCollection;\n}\n\n/**\n * Orders a set of categorical values so that None goes last.\n * @param {Array} categories\n * @returns {Array} sorted categories\n */\nexport function orderCategories(categories) {\n  return categories.sort((a, b) => {\n    if (a === 'None') {\n      return 1;\n    }\n\n    if (b === 'None') {\n      return -1;\n    }\n\n    return d3.ascending(a, b);\n  });\n}\n\n/**\n * Turns array inside out to create a object of objects with\n * each inner object containing all the values\n * [\n *  {id: 1, a: true},\n *  {id: 2, a: false, b:true}\n * ]\n * into\n * {a: {1: {id: 1, a: true}, b: {2: {id: 1, b: true, a: false}}}\n * @param {Array} collection\n */\nexport function invert(collection, accessor = d => d.id) {\n  const inverted = {};\n  const boolValues = d3.set();\n  collection.forEach(entry => {\n    Object.keys(entry).forEach(k => boolValues.add(k));\n  });\n\n  boolValues.each(key => {\n    const filteredValues = collection.filter(entry => entry[key]);\n    const keyedValues = {};\n    filteredValues.forEach(v => (keyedValues[accessor(v)] = v));\n\n    inverted[key] = keyedValues;\n  });\n\n  return inverted;\n}\n\n/**\n * concats together an array of arrays\n * @param {Array} arrays Array of arrays\n */\nexport function concatArrays(arrays) {\n  return [].concat.apply([], arrays);\n}\n\n/**\n * Merges two arrays by a shared id\n * could use https://github.com/ZitRos/array-merge-by-key\n * if that would be better.\n */\nexport function joinById(id, arrayA, arrayB) {\n  const arrayBMap = d3.map(arrayB, d => d[id]);\n\n  const mergedData = [];\n\n  arrayA.forEach(row => {\n    let mergedRow = {};\n    if (arrayBMap.has(row[id])) {\n      mergedRow = Object.assign({}, row, arrayBMap.get(row[id]));\n    } else {\n      mergedRow = Object.assign({}, row);\n    }\n\n    mergedData.push(mergedRow);\n  });\n\n  return mergedData;\n}\n\n/**\n * Adds contents from an object to an array of objects based on\n * input key.\n *\n * @param {Array} arrayOfObjects An Array of objects to modify\n * @param {Object} dict Object that serves as a dictionary to\n *   pull out additional info to append to objects in the\n *   arrayOfObjects array.\n * @param {String} key Key to match objects in arrayOfObjects and\n *   keys of dict by.\n * @param {String} path Path in objects of arrayOfObjects to\n *   put the new contents from dict in to.\n * @returns {Array} arrayOfObjects with new additions to each\n *   object from the values of dict.\n */\nexport function addByKey(arrayOfObjects, dict, key = 'key', newPath = 'details') {\n  arrayOfObjects.forEach(obj => {\n    // find new content for obj from its key\n    const newContent = dict[obj[key]];\n    if (newContent) {\n      obj[newPath] = newContent;\n    }\n  });\n\n  return arrayOfObjects;\n}\n\n/**\n * Returns powerset of an array of values\n * derived from: https://stackoverflow.com/questions/42773836/how-to-find-all-subsets-of-a-set-in-javascript\n * @param {Array} values Array of values\n */\nexport function powerSet(values) {\n  const pSet = values.reduce(\n    (subsets, value) => {\n      return subsets.concat(subsets.map(set => [value, ...set]));\n    },\n    [[]],\n  );\n  // sort all sets by name - for consistency\n  pSet.forEach(s => s.sort(d3.ascending));\n  // sort by length\n  pSet.sort((a, b) => a.length - b.length);\n\n  return pSet;\n}\n","import isEmpty from 'lodash.isempty';\n\n/**\n * Removes keys from an object that are empty.\n *\n * Returns a new empty. Will only go one level deep into objects\n * @param  {Object} obj input object\n * @return {Object}\n */\nexport function removeEmptyKeys(obj) {\n  const res = {};\n  const keys = Object.keys(obj);\n  keys.forEach(key => {\n    const prop = obj[key];\n    if (typeof prop === 'object' && !Array.isArray(prop) && prop !== null) {\n      const temp = removeEmptyKeys(prop);\n      if (!isEmpty(temp)) {\n        res[key] = temp;\n      }\n    } else if (!(prop === undefined || prop === null)) {\n      res[key] = prop;\n    }\n  });\n\n  return res;\n}\n\n/**\n * Convert Array of objects into an object keyed by\n * keyField.\n * @param {Array} array Array to convert to object\n * @param {String} keyField Attribute of array's objects to use as key\n * @return {Object} Object keyed by keyField values.\n */\nexport function arrayToObject(array, keyField) {\n  if (!array) {\n    return {};\n  }\n\n  return array.reduce((obj, item) => {\n    if (item[keyField]) {\n      obj[item[keyField]] = item;\n    }\n    return obj;\n  }, {});\n}\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Container, Row, Col } from 'react-bootstrap';\n\nimport './SidebarPage.scss';\n\n/**\n * Layout for Page with Control Sidebar\n */\nclass SidebarPage extends Component {\n  static propTypes = {\n    /**\n     * Content of the page\n     */\n    children: PropTypes.any.isRequired,\n\n    /**\n     * Classname to give container\n     */\n    name: PropTypes.string.isRequired,\n\n    /**\n     * Sidebar content\n     */\n    sidebar: PropTypes.any.isRequired,\n  };\n\n  /**\n   * Render sidebar\n   */\n  renderSidebar() {\n    const { sidebar } = this.props;\n    return (\n      <Col xl={3} md={3} className=\"Sidebar d-flex flex-column\">\n        {sidebar}\n      </Col>\n    );\n  }\n\n  /**\n   * Render main\n   */\n  renderMain() {\n    const { children } = this.props;\n\n    return (\n      <Col xl={9} md={9} className=\"Main\">\n        {children}\n      </Col>\n    );\n  }\n\n  /**\n   * React render method\n   */\n  render() {\n    const { name } = this.props;\n    return (\n      <Container fluid={true} className={name}>\n        <Row className=\"flex-xl-nowrap\">\n          {this.renderSidebar()}\n          {this.renderMain()}\n        </Row>\n      </Container>\n    );\n  }\n}\n\nexport default SidebarPage;\n","import { ascending, descending } from 'd3';\n\nimport { includesAny } from './collection';\n\n/**\n * Filters data array based on filters object.\n * Each key in the filters object indicates an attribute\n * in data to filter on. Each value in the filters object\n * is an array of allowed values for that attribute.\n *\n * If multiple values exist in a filter value array,\n * data elements matching any of the values are retained.\n *\n * If there are multiple keys in the filter object,\n * only data elements that have matching values for all\n * keys are retained.\n *\n * @param {Array} data Data to be filtered\n * @param {Object} filters key = filter value = Array of allowed values\n * @param {Boolean} keepIfNoFilters if true, returns unfiltered data\n *   if empty filters object {} provided.\n * @returns {Array} Filtered data\n */\nexport function filterData(data, filters, keepIfNoFilters = true) {\n  // if there is no filters object, or filters has no keys,\n  // early exit.\n  if (!filters || Object.keys(filters).length === 0) {\n    if (keepIfNoFilters) {\n      return data;\n    } else {\n      return [];\n    }\n  }\n\n  return data.filter(row => {\n    let keep = true;\n\n    Object.keys(filters).forEach(key => {\n      const rowValue = row[key];\n      const filterValue = Array.isArray(filters[key])\n        ? filters[key].map(f => f.toString())\n        : [filters[key].toString()];\n\n      if (!rowValue) {\n        keep = false;\n      }\n\n      if (Array.isArray(rowValue)) {\n        const rowStrings = rowValue.map(r => r.toString());\n        keep = keep && includesAny(rowStrings, filterValue);\n      } else {\n        keep = keep && filterValue.includes(rowValue.toString());\n      }\n    });\n    return keep;\n  });\n}\n\n/**\n * Sorts array of data based on the value of the sortBy attribute.\n * WARNING: sort is currently done in place.\n *\n * @param {Array} data Array of Objects to sort\n * @param {String} sortBy Attribute to sort data by\n * @param {String} direction either 'asc' or 'dsc'\n * @param {Boolean} isNum True if the values of the sortBy are numbers\n */\nexport function sortData(data, sortBy, direction = 'asc', isNum = true) {\n  if (sortBy) {\n    data.sort((a, b) => {\n      const aValue = isNum ? +a[sortBy] : a[sortBy];\n      const bValue = isNum ? +b[sortBy] : b[sortBy];\n      if (direction === 'asc') {\n        return ascending(aValue, bValue);\n      } else {\n        return descending(aValue, bValue);\n      }\n    });\n  }\n\n  return data;\n}\n","import { UrlQueryParamTypes, Serialize } from 'react-url-query';\n\n/**\n * This object documents state that we want to keep in the URL. This configuration\n * will be shared mymultiple containers.\n * @type {Object}\n */\nexport const urlPropsQueryConfig = {\n  colorBy: { type: UrlQueryParamTypes.string },\n  search: {\n    type: {\n      encode: Serialize.encodeJson,\n      decode: Serialize.decodeJson,\n    },\n  },\n  filters: {\n    type: {\n      encode: Serialize.encodeJson,\n      decode: Serialize.decodeJson,\n    },\n  },\n};\n\nexport const urlPropDefaults = {\n  filters: {},\n};\n","import React, { Component } from 'react';\nimport { addUrlProps } from 'react-url-query';\n\nimport Controls from '../Controls/Controls';\nimport SidebarPage from '../SidebarPage/SidebarPage';\n\nimport { filterData } from '../../utils/filters';\n\nimport { urlPropsQueryConfig, urlPropDefaults } from './urlProps';\nimport dataDefs from './dataDefs.json';\nimport controlsConfig from './controlsConfig.json';\n\nimport data from './data.json';\n\nclass App extends Component {\n  static defaultProps = {\n    ...urlPropDefaults,\n  };\n\n  renderSidebar() {\n    const { filters, onChangeFilters, colorBy, onChangeColorBy } = this.props;\n    return (\n      <Controls\n        data={data}\n        dataDefs={dataDefs}\n        controlsConfig={controlsConfig}\n        colorBy={colorBy}\n        onChangeColorBy={onChangeColorBy}\n        filters={filters}\n        onChangeFilters={onChangeFilters}\n      >\n        <h2>Control Panel</h2>\n      </Controls>\n    );\n  }\n\n  renderData() {\n    const { filters } = this.props;\n\n    const filteredData = filterData(data, filters);\n    return (\n      <ul>\n        {filteredData.map(d => (\n          <li key={d.name}>{d.name}</li>\n        ))}\n      </ul>\n    );\n  }\n\n  render() {\n    return (\n      <SidebarPage name=\"App\" sidebar={this.renderSidebar()}>\n        <h1>Data</h1>\n        {this.renderData()}\n      </SidebarPage>\n    );\n  }\n}\n\nexport default addUrlProps({ urlPropsQueryConfig })(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Route, BrowserRouter as Router } from 'react-router-dom';\nimport { RouterToUrlQuery } from 'react-url-query';\n\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'bootstrap/dist/css/bootstrap.css';\nimport 'react-select/dist/react-select.css';\nimport 'react-virtualized/styles.css';\nimport 'react-virtualized-select/styles.css';\nimport 'react-tippy/dist/tippy.css';\n\nReactDOM.render(\n  <Router>\n    <RouterToUrlQuery>\n      <Route component={App} />\n    </RouterToUrlQuery>\n  </Router>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}